{"instance_id": "django__django-9296", "model_patch": "--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -71,3 +71,7 @@\n     def get_elided_page_range(self, number=1, *, on_each_side=3, on_ends=2):\n         return list(self._get_elided_page_range(number, on_each_side=on_each_side, on_ends=on_ends))\n \n+    def __iter__(self):\n+        for page_num in self.page_range:\n+            yield self.page(page_num)\n+\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-10097", "model_patch": "--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -19,7 +19,7 @@\n     ul = '\\u00a1-\\uffff'  # unicode letters range (must not include ASCII digits)\n \n     # IP patterns\n-    ipv4_re = r'(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'\n+    ipv4_re = r'(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'  # noqa\n     ipv6_re = r'\\[[0-9a-f:\\.]+\\]'\n \n     # Host patterns\n@@ -30,7 +30,7 @@\n     # Userinfo (username + password)\n     user_re = r'[^\\s:@/]+'\n     # URL-\u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u044b \":\", \"@\" \u0438 \"/\" \u0432 \u0438\u043c\u0435\u043d\u0430\u0445\n-    # \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f\u0445 \u0431\u044b\u043b\u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445.\n+    # \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f\u0445 \u0431\u044b\u043b\u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445.  # noqa\n     # \u0421\u043c. RFC 1738 Section 3.1.\n \n     tld_re = r'\\.([a-z]{2,}|xn--[a-z0-9\\-]{2,})'\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-10880", "model_patch": "--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -120,6 +120,7 @@\n             template = self.template\n             if self.distinct:\n                 template = template % 'DISTINCT '\n+            else:\n+                template = template % ''\n         elif self.distinct:\n             template = 'COUNT(DISTINCT %(field)s)'\n         else:\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-10914", "model_patch": "--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -52,7 +52,7 @@\n # https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-max-memory-size\n FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5MB\n \n-# https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-permissions\n+# https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-permissions\n FILE_UPLOAD_PERMISSIONS = 0o644\n \n # https://docs.djangoproject.com/en/dev/ref/settings/#file-upload-temp-dir\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-10999", "model_patch": "--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -20,7 +20,7 @@\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n     r'(?:(?P<minutes>-?\\d+):)?'\n     r'(?P<seconds>-?\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11066", "model_patch": "--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -24,5 +24,5 @@\n             content_type.model = new_model_name\n             content_type.name = new_model_name.lower()\n             with transaction.atomic(using=db):\n-                content_type.save(update_fields={'model'})\n+                content_type.save(using=db, update_fields={'model'})\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11099", "model_patch": "--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -24,7 +24,7 @@\n     message = _(\n         \"Enter a valid username. This value may contain only letters, \"\n         \"numbers, and @/./+/-/_ characters.\"\n-    )\n+    )  # noqa: DJ003\n     flags = 0\n \n     def __init__(self, message=None, code=None):\n@@ -33,7 +33,7 @@\n         if code is not None:\n             self.code = code\n \n-    regex = r\"^[\\w.@+-]+$\"\n+    regex = r\"\\A[\\w.@+-]+\\Z\"\n \n     def __call__(self, value):\n         value = str(value)\n@@ -61,7 +61,7 @@\n         \"Enter a valid username. This value may contain only letters, \"\n         \"numbers, and @/./+/-/_ characters.\"\n     )\n-    regex = r\"^[\\w.@+-]+$\"\n+    regex = r\"\\A[\\w.@+-]+\\Z\"\n \n \n class UnicodeUsernameValidator(UsernameValidator):\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11119", "model_patch": "--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -83,7 +83,7 @@\n         context = context or {}\n         if isinstance(context, Context):\n             context.template = self\n-        else:\n+        else:  # context is a dict\n             context = Context(context, autoescape=self.autoescape)\n         return self.template.render(context)\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11133", "model_patch": "--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -41,6 +41,8 @@\n         if isinstance(value, str):\n             return value.encode(self.charset, self.errors)\n         elif isinstance(value, memoryview):\n+            # See https://docs.djangoproject.com/en/dev/ref/request-response/#streaminghttpresponse\n+            # for details on when memoryview is accepted.\n             return bytes(value)\n         else:\n             return bytes(value)\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11163", "model_patch": "--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -25,7 +25,7 @@\n     opts = instance._meta\n     data = {}\n     for f in opts.concrete_fields + opts.many_to_many:\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11179", "model_patch": "--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -273,6 +273,8 @@\n \n         # Update the model instance.\n         setattr(instance, instance._meta.pk.attname, None)\n+        # Clear the primary key in case it is autogenerated.\n+        instance._pk_val = None\n     elif objs:\n         # bulk case for multiple objects\n         pk_list = [obj.pk for obj in objs]\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11239", "model_patch": "--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -44,6 +44,12 @@\n         if settings_dict['OPTIONS'].get('sslmode'):\n             args.append(\"sslmode=%s\" % settings_dict['OPTIONS']['sslmode'])\n \n+        if settings_dict['OPTIONS'].get('sslcert'):\n+            args.append(\"sslcert=%s\" % settings_dict['OPTIONS']['sslcert'])\n+        if settings_dict['OPTIONS'].get('sslkey'):\n+            args.append(\"sslkey=%s\" % settings_dict['OPTIONS']['sslkey'])\n+\n+\n         if settings_dict['OPTIONS'].get('sslrootcert'):\n             args.append(\"sslrootcert=%s\" % settings_dict['OPTIONS']['sslrootcert'])\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11299", "model_patch": "--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -163,7 +163,7 @@\n         if isinstance(col, Col):\n             return self.compile(col)\n         else:\n-            return col.as_sql(self, self.connection)\n+            return col.as_sql(self, self.connection)[0]\n \n     def resolve_columns(self, row, fields=()):\n         \"\"\"\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11433", "model_patch": "--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -345,7 +345,7 @@\n                 # value wasn't in the form data. If the field is nullable, then\n                 # we need to explicitly set it to None to satisfy the\n                 # database. Refs #3075.\n-                if field.null and data.get(field.name) is None:\n+                if field.null and data.get(field.name) is None and cleaned_data.get(field.name) is None:\n                     tmp[field.name] = None\n \n         # Attach the cleaned data to the form.\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11451", "model_patch": "--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -15,6 +15,8 @@\n \t\t# typically if credentials are provided for another backend.\n \t\t# Continuing makes a useless database query and runs\n \t\t# the password hasher needlessly (which is expensive).\n+\t\tif username is None or password is None:\n+\t\t\treturn\n \t\ttry:\n \t\t\tuser = UserModel._default_manager.get_by_natural_key(username)\n \t\texcept UserModel.DoesNotExist:\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11490", "model_patch": "--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,6 +425,8 @@\n         # query. Using clone() clears the selects that get added in\n         # aggregate_ref().\n         result = self.query.clone()\n+        # Clear the combination select and ordering in case values() or\n+        # values_list() is called multiple times.\n         result.select = []\n         result.order_by = ()\n         if distinct is not False:\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11555", "model_patch": "--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -430,7 +430,7 @@\n         if isinstance(order, str):\n             order_field = order\n         else:\n-            order_field = order.expression\n+            order_field = str(order.expression)\n         if order_field == '?':\n             return\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11603", "model_patch": "--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -11,6 +11,11 @@\n     template = '%(function)s(%(expression)s)'\n     # track if this aggregate is a disctinct aggregate\n     is_distinct = False\n+\n+    def __init__(self, expression, distinct=False, **extra):\n+        super().__init__(expression, **extra)\n+        self.is_distinct = distinct\n+\n     def __bool__(self):\n         return True\n \n@@ -33,6 +38,7 @@\n \n class Avg(Aggregate):\n     function = 'AVG'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -54,6 +60,7 @@\n \n class Sum(Aggregate):\n     function = 'SUM'\n+    allow_distinct = True\n \n \n class StdDev(Aggregate):\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11820", "model_patch": "--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -495,7 +495,7 @@\n                     continue\n \n                 if \".\" in order_field:\n-                    if order_field != \"pk\":\n+                    if order_field != \"pk\" and not order_field.endswith(\"__pk\"):\n                         raise FieldDoesNotExist(\n                             \"%s.ordering refers to the nonexistent field, \"\n                             \"related field, or lookup '%s'.\"\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11880", "model_patch": "--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -197,5 +197,7 @@\n         # not copy completely, because bound fields have to have access\n         # to the form instance, which has to be the same as for original field.\n         obj = copy.copy(self)\n+        obj.error_messages = copy.copy(self.error_messages)\n+\n         return obj\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11951", "model_patch": "--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1194,6 +1194,8 @@\n             # batch_size is None.\n             max_batch_size = batch_size\n \n+        if batch_size:\n+            batch_size = min(batch_size, max_batch_size)\n         if using is None:\n             using = router.db_for_write(self.model)\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-11964", "model_patch": "--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -14,6 +14,12 @@\n         return cls(value)\n \n     def __get__(self, instance, cls=None):\n+        if instance is None:\n+            return self\n+        return self.value\n+\n+    def _get_value(self):\n+        # Accessing the value directly bypasses __get__.\n         return self.value\n \n     @classmethod\n", "model_name_or_path": "google/gemini-2.0-flash"}
{"instance_id": "django__django-12125", "model_patch": "--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -263,6 +263,9 @@\n         if hasattr(value, \"__module__\"):\n             module = value.__module__\n             name = value.__name__\n+            # Handle inner classes\n+            if hasattr(value, \"__qualname__\"):\n+                name = value.__qualname__\n             return module, name\n         else:\n             return value.__class__.__module__, value.__class__.__name__\n", "model_name_or_path": "google/gemini-2.0-flash"}
